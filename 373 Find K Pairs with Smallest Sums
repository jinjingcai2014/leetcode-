/**
373. Find K Pairs with Smallest Sums  QuestionEditorial Solution  My Submissions
You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.
Define a pair (u,v) which consists of one element from the first array and one element from the second array.
Find the k pairs (u1,v1),(u2,v2) ...(uk,vk) with the smallest sums.
Example 1:
Given nums1 = [1,7,11], nums2 = [2,4,6],  k = 3
Return: [1,2],[1,4],[1,6]
The first 3 pairs are returned from the sequence:
[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
Example 2:
Given nums1 = [1,1,2], nums2 = [1,2,3],  k = 2
Return: [1,1],[1,1]
The first 2 pairs are returned from the sequence:
[1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
Example 3:
Given nums1 = [1,2], nums2 = [3],  k = 3 
Return: [1,3],[2,3]
All possible pairs are returned from the sequence:
[1,3],[2,3]
*/
public class Solution {
    public IList<int[]> KSmallestPairs(int[] nums1, int[] nums2, int k) {
        List<int[]> result = new List<int[]>();
            int[] pos = new int[nums1.Count()]; 
            if (nums1.Count() == 0 || nums2.Count() == 0) return result;
            k = Math.Min(k, nums1.Count()*nums2.Count());
            while (k > 0)
            {
                int si = 0;
                //minsum必须设置为最小值
                int minsum = Int32.MaxValue;

                for (int i = 0; i < nums1.Count(); i++)
                {
                //通过pos[i]来记录nums2的最小和的下标
                    if (pos[i] < nums2.Count()&& nums1[i] + nums2[pos[i]] < minsum )
                    {
                        minsum = nums1[i] + nums2[pos[i]];
                        si = i;
                    }
                }
                int[] temp = new int[] { nums1[si], nums2[pos[si]] };
                result.Add(temp);
                pos[si]++;
                k--;
            }
            //while (count-- > 0)
            //{
            //    int minsum = 0;
            //    int si = 0;
            //    for(int i = 0; i < nums1.Count(); i++)
            //    {
            //        if((nums1[i]+nums2[pos[i]] < minsum )&& (pos[i] < nums2.Count()))
            //        {
            //            minsum = nums1[i] + nums2[pos[i]];
            //            si = i;
            //        }
            //    }
            //    result.Add(new int[] { nums1[si], nums2[pos[si]] });
            //    pos[si]++;
            //}
            return result;
    }
}
